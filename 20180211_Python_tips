01 如何在命令行查看python文档
#第一个命令pydoc sys.exit查看sys模块的exit函数文档信息，第二个命令pydoc sorted查看了内建函数sorted的文档信息。
pydoc sys.
Help on built-in function exit in sys:

sys.exit = exit(...)
exit([status])

Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e.,success).
If the status is an integer, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure)
pydoc sorted
Help on built-in function sorted in module builtin:

sorted(...)
sorted(iterable, cmp=None, key=None, reverse=False) -->

02 如何将python代码打包成独立的二进制文件
#需要编译的python代码如下：

#!/usr/bin/env python# -- coding: utf-8 --print 'hello, world!'

#将python代码打包成独立的二进制文件步骤： 我解释下上面命令行，首先使用python直接运行需要编译成独立二进制文件的hello_world.py，
#程序正常打印hello, world!，然后使用pip安装pyinstaller，通过pyinstaller将hello_world.py打包成独立的二进制文件，
#然后进入当前目录下的dist目录，运行打包成功的二进制文件hello_world，程序正常打印hello, world!。除了pyinstaller，
#还有其他工具可以实现类似功能
python hello_world.py

pip install pyinstaller
pyinstaller -F hello_world.py
cd ./dist/
./hello_world

03 如何自动格式化python代码
#格式化前的demo.py代码：
安装autopep8，并使用autopep8格式化demo.py代码：
pip install autopep8
autopep8 --in-place --aggressive --aggressive demo.py

04 正确的函数返回
#前一种方式中，如果输入的参数b为0，函数会默认返回None，这是一个不太好的编程习惯。
#例如，当把函数的返回值作为if条件判断时，0.0和None都是False，这样容易导致bug。
#后面这种方式，将除数是0当成异常抛出，让调用者处理异常，是比较合理的做法。
def divide(a,b):
try:
return a*1.0/b
except ZeroDivisionError as e:
raise e

print(divide(0,1))

print(divide(1,0))

05 正确使用函数默认参数
def gen_list(a=[],b=None):
a.append(b)
return a

print(gen_list(b=2))

print(gen_list(b=3))
#前一种方式会导致函数默认值改变，多次调用相互影响。正确方式是将函数默认值设置成None，在函数内部初始化默认参数。
#这里只是针对传递引用类型的参数，如果是数字、字符串等类型就不存在该问题。
def gen_list(a=None,b=None):
if a is None:
a=[]
a.append(b)
return a

print(gen_list(b=2))

print(gen_list(b=3))

06 利用元组传递多个函数参数
def demo(a,b,c,d):
print(a,b,c,d)

args = (1,2,3,4)
demo(*args)
